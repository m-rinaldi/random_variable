I want to change the C interface implementation in order to provide a much easier way for adding new distributions of random variables: 

Instead of having a set of functions at the C level for every random variable, just keep a fixed set of functions and perform a discrimination inside every functions for each different type of random variable.

As an example, what I want to do can be achieved:

--- for the data:
		/* to provide some kind of polimorfism we will use the same
		 * data structure for every different kind of RV, then we can
		 * use the same functions with them */

		/* to distinguish the type */
		enum RV_TYPE {
			RV_GENERIC,
			RV_POISSON,
			RV_BERNOULLI,
			RV_NORMAL
			/* and so forth ... */	
		}

		/* the random variable itself (it parameters) */	
		struct _rv {
			enum RV_TYPE type;
			union _rvs {
				/* a structure for every single RV */
				
				/* Poisson */
				struct {
					double lambda;	
				} poisson;

				/* Bernoulli */
				struct {
					double p;
				} bernoulli;

				/* Normal */
				struct {
					double mu;
					double sigma;
				} normal;

				/* and so on ... */
			}
		};

--- for the operations:
		VALUE RV_outcome(VALUE self, ...)
		{
			/* we can obtain the type of random variable from
			 * self, the we know the required number of parameters,
			 * and we get them from the stack */

			switch(RV_TYPE(self)) {
				case RV_T_GENERIC:
					/* ... */
				case RV_T_POISSON:
					/* ... */
			}				
		}	
			

